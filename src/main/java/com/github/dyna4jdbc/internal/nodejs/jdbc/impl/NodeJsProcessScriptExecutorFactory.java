/*
 * Copyright (c) 2016, 2017 Peter G. Horvath, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 
package com.github.dyna4jdbc.internal.nodejs.jdbc.impl;

import java.sql.SQLWarning;
import java.util.LinkedList;

import com.github.dyna4jdbc.internal.JDBCError;
import com.github.dyna4jdbc.internal.ScriptExecutor;
import com.github.dyna4jdbc.internal.ScriptExecutionException;
import com.github.dyna4jdbc.internal.config.Configuration;
import com.github.dyna4jdbc.internal.processrunner.jdbc.impl.DefaultExternalProcessScriptExecutorFactory;
import com.github.dyna4jdbc.internal.processrunner.jdbc.impl.ExternalProcessScriptExecutor;


public final class NodeJsProcessScriptExecutorFactory extends DefaultExternalProcessScriptExecutorFactory {



    public static NodeJsProcessScriptExecutorFactory getInstance(String eosToken) {
        return new NodeJsProcessScriptExecutorFactory(eosToken);
    }

    private final String replInitScript;

    private NodeJsProcessScriptExecutorFactory(String eosToken) {
        this.replInitScript = ""
                + "const endOfStreamToken = '" + eosToken + "'; " 
                + "const vm = require('vm'); "
                + "require('repl').start({ " 
                + "terminal: false, " + "prompt: '', " 
                + "ignoreUndefined: true, "
                + "eval: function(cmd, ctx, fn, cb) { "
                + "try { vm.runInContext(cmd, ctx, fn); } "
                + "catch (err) { cb(err); } "
                + "finally { console.log(endOfStreamToken); console.error(endOfStreamToken); } "
                + "} });";
    }

    @Override
    public ExternalProcessScriptExecutor newExternalProcessScriptExecutor(Configuration configuration) {

        try {
            NodeJsProcessScriptExecutor nodeJsProcessScriptExecutor =
                    new NodeJsProcessScriptExecutor(configuration, replInitScript);

            InitScriptInvoker initScriptInvoker =
                    new InitScriptInvoker(configuration, nodeJsProcessScriptExecutor);

            initScriptInvoker.invokeScript("1+1"); // basic sanity check of Node.js availability

            return nodeJsProcessScriptExecutor;

        } catch (ScriptExecutionException e) {
            throw new RuntimeException("Exception initializing NodeJsProcessScriptExecutor", e);
        }

    }

    private static final class InitScriptInvoker extends AutoGeneratedScriptHandler {

        private InitScriptInvoker(Configuration configuration, ScriptExecutor scriptExecutor) {
            super(configuration, scriptExecutor);
        }

        @Override
        protected void onSingleWarning(String script, SQLWarning warning) {
            JDBCError.CONNECT_FAILED_EXCEPTION.raiseUncheckedException(
                    warning,
                    "Node.js process wrote to output while starting the REPL: "
                    + "this is considered to be a fatal error.");
        }

        @Override
        protected void onMultipleWarnings(String script, LinkedList<SQLWarning> warningList) {
            JDBCError.CONNECT_FAILED_EXCEPTION.raiseUncheckedExceptionWithSuppressed(warningList,
                    "Node.js process wrote to output while starting the REPL: "
                    + "this is considered to be a fatal error");
        }
    }

}
